// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  COLLEGE_COORDINATOR
  INSTRUCTOR
  ADMIN
  DEPTHEAD
}

model User {
  user_id      String   @id @default(uuid())
  password     String
  fname        String
  lname        String
  email        String   @unique
  bio          String?
  photo        String?
  phone_number String?
  department   String?
  college      String?
  batch        String?
  role         UserRole

  feedbacks      feedback[]
  progresses     Progress[]
  enrolments     Enrolment[]
  assign_courses Assign_course[]
  Session        Session?
}

model Session {
  user_id String @unique
  uuid    String @unique

  user User @relation(fields: [user_id], references: [user_id])
}

model Course {
  course_code    String  @id @default(uuid())
  course_name    String
  batch          Int
  dept           String
  chapter_length Int
  no_week_take   Int
  description    String?

  course_events  Course_event[]
  course_outline Course_outline?
  feedbacks      feedback[]
  progresses     Progress[]
  enrolments     Enrolment[]
  Assign_course  Assign_course[]
}

model Course_event {
  event_id    Int      @id @default(autoincrement())
  course_code String
  event_name  String
  event_type  String
  event_date  DateTime
  discription String?

  course Course @relation(fields: [course_code], references: [course_code])
}

model feedback {
  feedback_id          Int     @id @default(autoincrement())
  user_id              String // STUDENT User_id
  course_code          String
  rating               Int
  comment              String?
  no_chapter_completed Int?

  user   User   @relation(fields: [user_id], references: [user_id])
  course Course @relation(fields: [course_code], references: [course_code])
}

model Course_outline {
  course_code       String  @id
  course_objectives String?
  topics            String?
  learning_outcomes String?
  no_chapterperweek Int?

  course Course @relation(fields: [course_code], references: [course_code])
}

model Progress {
  progress_id          Int    @id @default(autoincrement())
  user_id              String // LECTURER User_id
  course_code          String
  percent_complete     Int?
  no_chapter_completed Int?

  user   User   @relation(fields: [user_id], references: [user_id])
  course Course @relation(fields: [course_code], references: [course_code])
}

model Enrolment {
  enrolment_id Int    @id @default(autoincrement())
  user_id      String // STUDENT user_id
  course_code  String

  user   User   @relation(fields: [user_id], references: [user_id])
  course Course @relation(fields: [course_code], references: [course_code])
}

model Assign_course {
  assignment_id Int    @id @default(autoincrement())
  user_id       String // LECTURER user_id
  course_code   String

  user   User   @relation(fields: [user_id], references: [user_id])
  course Course @relation(fields: [course_code], references: [course_code])
}
